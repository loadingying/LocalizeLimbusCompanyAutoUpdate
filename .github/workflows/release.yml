name: Build & Release (Windows)

on:
  push:
    tags: ['v*']          # 推送形如 v1.0.0 / v20250822 的 tag 会触发
  workflow_dispatch:       # 支持手动触发
    inputs:
      version:
        description: '版本号（如 v20250822 或 v1.0.0；留空则用当天日期）'
        required: false

permissions:
  contents: write          # 需要写权限来创建 tag / release

jobs:
  build-windows:
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'
          cache: true

      - name: Compute VERSION
        run: |
          if ('${{ github.ref_type }}' -eq 'tag') {
            $v = '${{ github.ref_name }}'
          } elseif ('${{ inputs.version }}') {
            $v = '${{ inputs.version }}'
          } else {
            $v = 'v' + (Get-Date -Format yyyyMMdd)
          }
          "VERSION=$v" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "Release version: $v"

      # 解决缺少 go.mod / go.sum 的问题（如果已存在会跳过 init）
      - name: Init / Tidy Go modules
        run: |
          if (!(Test-Path go.mod)) {
            go mod init github.com/loadingying/LocalizeLimbusCompanyAutoUpdate
          }
          go get golang.org/x/sys/windows@latest
          go mod tidy

      # 确认需要的资产存在（go:embed 的 assets/7za.exe 以及两个脚本）
      - name: Verify required files
        run: |
          if (-not (Test-Path '.\assets\7za.exe')) { throw 'assets\7za.exe 不存在（用于 go:embed）' }
          if (-not (Test-Path '.\Register-AutoUpdate.ps1')) { throw '缺少 Register-AutoUpdate.ps1' }
          if (-not (Test-Path '.\Unregister-AutoUpdate.ps1')) { throw '缺少 Unregister-AutoUpdate.ps1' }

      - name: Build (Windows exe)
        run: |
          go build -ldflags "-s -w" -o auto_update.exe .

      - name: Package zip
        run: |
          $zip = "auto_update_$env:VERSION.zip"
          Compress-Archive -Path .\auto_update.exe, .\Register-AutoUpdate.ps1, .\Unregister-AutoUpdate.ps1 -DestinationPath $zip -Force
          "ZIP=$zip" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "Created $zip"

      # 手动触发时通常没有 tag，这里创建并推送一个 tag，确保 Release 指向它
      - name: Create tag if missing (manual dispatch)
        if: ${{ github.ref_type != 'tag' }}
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git tag $env:VERSION
          git push origin $env:VERSION

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION }}
          name: Auto Update ${{ env.VERSION }}
          files: ${{ env.ZIP }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
